// Êñá‰ª∂Ë∑ØÂæÑÔºöapp/src/main/java/com/example/nativechatdemo/ui/chat/ChatActivity.kt
// Êñá‰ª∂Á±ªÂûãÔºöKotlin Class (Activity)
// ‰øÆÊîπÂÜÖÂÆπÔºö‰øÆÂ§çÁºñËØëÈîôËØØÔºåÂà†Èô§Â∫üÂºÉÁöÑonBackPressedÊñπÊ≥ï

package com.example.nativechatdemo.ui.chat

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputMethodManager
import android.widget.EditText
import android.widget.HorizontalScrollView
import android.widget.ImageButton
import android.widget.TextView
import androidx.activity.viewModels
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.nativechatdemo.R
import com.example.nativechatdemo.custom.FavorLineView
import com.example.nativechatdemo.data.model.Character
import com.example.nativechatdemo.ui.character.CharacterSelectionActivity
import com.example.nativechatdemo.viewmodel.ChatViewModel
import kotlinx.coroutines.launch

class ChatActivity : AppCompatActivity() {

    private val viewModel: ChatViewModel by viewModels()

    private lateinit var favorScrollView: HorizontalScrollView
    private lateinit var favorLineView: FavorLineView
    private lateinit var recyclerView: RecyclerView
    private lateinit var messageAdapter: MessageAdapter
    private lateinit var inputEditText: EditText
    private lateinit var sendButton: ImageButton
    private lateinit var favorabilityText: TextView
    private lateinit var roundsText: TextView

    private var currentCharacter: Character? = null
    private var gender: String = ""
    private var replayMode: String? = null
    private var originalConversationId: String? = null
    private var moduleType: String = "basic"

    companion object {
        private const val TAG = "ChatActivity"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_chat)

        val userId = intent.getStringExtra("userId") ?: return finish()
        val characterId = intent.getStringExtra("characterId") ?: return finish()
        val characterName = intent.getStringExtra("characterName") ?: "AI"

        gender = intent.getStringExtra("gender") ?: ""
        replayMode = intent.getStringExtra("replayMode")
        originalConversationId = intent.getStringExtra("originalConversationId")
        moduleType = intent.getStringExtra("moduleType") ?: "basic"

        Log.d(TAG, "moduleType: $moduleType")

        val character = Character(
            id = characterId,
            name = characterName,
            description = "",
            avatar = characterId,
            type = characterId.replace("_girl", "").replace("_boy", ""),
            gender = if (characterId.contains("boy")) "male" else "female"
        )

        currentCharacter = character

        val toolbar = findViewById<Toolbar>(R.id.toolbar)
        setSupportActionBar(toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.setDisplayShowHomeEnabled(true)

        supportActionBar?.title = when (moduleType) {
            "training" -> "‰∏é $characterName ÁöÑÊïÖ‰∫ã"
            else -> characterName
        }

        initViews()
        viewModel.initChat(userId, character, replayMode, originalConversationId, moduleType)
        observeData()
        setupInput()
        setupKeyboardHandling()
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        if (moduleType != "training") {
            menuInflater.inflate(R.menu.menu_chat, menu)
        }
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            android.R.id.home -> {
                handleBackPressed()
                true
            }
            R.id.action_stop -> {
                showStopDialog()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun handleBackPressed() {
        if (moduleType == "training") {
            AlertDialog.Builder(this)
                .setTitle("ÊèêÁ§∫")
                .setMessage("Á°ÆÂÆöË¶ÅÈÄÄÂá∫ÂêóÔºüÂØπËØùËøõÂ∫¶Â∞Ü‰∏ç‰ºö‰øùÂ≠ò")
                .setPositiveButton("Á°ÆÂÆö") { _, _ ->
                    exitToCharacterSelection()
                }
                .setNegativeButton("ÂèñÊ∂à", null)
                .show()
        } else {
            finish()
        }
    }

    private fun showStopDialog() {
        AlertDialog.Builder(this)
            .setTitle("ÂÅúÊ≠¢ÂØπËØù")
            .setMessage("Á°ÆÂÆöË¶ÅÂÅúÊ≠¢Êú¨Ê¨°ÂØπËØùÂêóÔºü")
            .setPositiveButton("Á°ÆÂÆö") { _, _ ->
                handleStopConversation()
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }

    private fun handleStopConversation() {
        val conversation = viewModel.conversation.value
        if (conversation == null) {
            finish()
            return
        }

        val rounds = conversation.actualRounds

        if (rounds > 5) {
            AlertDialog.Builder(this)
                .setTitle("ËøõÂÖ•Â§çÁõò")
                .setMessage("ÂØπËØùËΩÆÊï∞: $rounds ËΩÆ\nÂáÜÂ§áÊü•ÁúãÂ§çÁõòÂàÜÊûê")
                .setPositiveButton("ËøõÂÖ•") { _, _ ->
                    startReviewActivity()
                }
                .setCancelable(false)
                .show()
        } else {
            AlertDialog.Builder(this)
                .setTitle("ÂØπËØùÂ§™Áü≠")
                .setMessage("ÂØπËØùËΩÆÊï∞‰∏çË∂≥6ËΩÆÔºåÊó†Ê≥ïÁîüÊàêÂ§çÁõò")
                .setPositiveButton("Á°ÆÂÆö") { _, _ ->
                    finish()
                }
                .show()
        }
    }

    private fun startReviewActivity() {
        val intent = Intent(this, com.example.nativechatdemo.ui.review.ReviewActivity::class.java)
        val conversation = viewModel.conversation.value
        val character = currentCharacter

        intent.putExtra("conversationId", conversation?.id)
        intent.putExtra("userId", conversation?.userId)
        intent.putExtra("characterId", character?.id)
        intent.putExtra("characterName", character?.name)
        intent.putExtra("gender", gender)
        intent.putExtra("finalFavor", conversation?.currentFavorability)
        intent.putExtra("totalRounds", conversation?.actualRounds)
        intent.putExtra("favorPoints", conversation?.favorPoints)

        if (replayMode != null) {
            intent.putExtra("reviewType", "second")
            intent.putExtra("replayMode", replayMode)
            intent.putExtra("originalConversationId", originalConversationId)
        } else {
            intent.putExtra("reviewType", "first")
        }

        startActivity(intent)
        finish()
    }

    private fun initViews() {
        favorScrollView = findViewById(R.id.favorScrollView)
        favorLineView = findViewById(R.id.favorLineView)
        recyclerView = findViewById(R.id.recyclerView)
        inputEditText = findViewById(R.id.inputEditText)
        sendButton = findViewById(R.id.sendButton)
        favorabilityText = findViewById(R.id.favorabilityText)
        roundsText = findViewById(R.id.roundsText)

        messageAdapter = MessageAdapter()
        recyclerView.adapter = messageAdapter
        recyclerView.layoutManager = LinearLayoutManager(this)

        recyclerView.setOnTouchListener { _, _ ->
            hideKeyboard()
            false
        }

        favorLineView.onPointClickListener = { point ->
            Log.d(TAG, "ÁÇπÂáªÊü±Â≠ê: round=${point.round}")

            val messagePosition = calculateMessagePosition(point.round)
            if (messagePosition >= 0) {
                recyclerView.smoothScrollToPosition(messagePosition)
            }

            val message = if (point.reason.isNotEmpty()) {
                "Á¨¨${point.round}ËΩÆ\nÂ•ΩÊÑüÂ∫¶: ${point.favor}%\n\nüí° ÂèòÂåñÂéüÂõ†:\n${point.reason}"
            } else {
                "Á¨¨${point.round}ËΩÆ\nÂ•ΩÊÑüÂ∫¶: ${point.favor}%"
            }

            val title = if (point.reason.isNotEmpty()) "Â•ΩÊÑüÂ∫¶Á™ÅÁ†¥ üéâ" else "Â•ΩÊÑüÂ∫¶ËØ¶ÊÉÖ"

            AlertDialog.Builder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("Á°ÆÂÆö") { dialog, _ -> dialog.dismiss() }
                .show()
        }
    }

    private fun calculateMessagePosition(round: Int): Int {
        if (round <= 0) return 0
        val currentMessages = viewModel.messages.value
        if (currentMessages.isEmpty()) return -1
        val targetPosition = (round - 1) * 2
        return if (targetPosition < currentMessages.size) targetPosition else currentMessages.size - 1
    }

    private fun observeData() {
        lifecycleScope.launch {
            viewModel.conversation.collect { conversation ->
                conversation?.let {
                    favorabilityText.text = "Â•ΩÊÑüÂ∫¶: ${it.currentFavorability}"

                    roundsText.text = if (it.isTrainingMode) {
                        "ËΩÆÊï∞: ${it.actualRounds}"
                    } else {
                        "ËΩÆÊï∞: ${it.actualRounds}/45"
                    }

                    Log.d(TAG, "ÂΩìÂâçËΩÆÊï∞: ${it.actualRounds}")
                }
            }
        }

        lifecycleScope.launch {
            viewModel.messages.collect { messages ->
                messageAdapter.submitList(messages)
                if (messages.isNotEmpty()) {
                    recyclerView.smoothScrollToPosition(messages.size - 1)
                }
            }
        }

        lifecycleScope.launch {
            viewModel.favorPoints.collect { points ->
                Log.d(TAG, "Êõ¥Êñ∞Â•ΩÊÑüÁ∫ø: ${points.size}‰∏™Êü±Â≠ê")
                favorLineView.updatePoints(points)
                scrollToLatestBar(points.size)
            }
        }

        lifecycleScope.launch {
            viewModel.trainingEndingEvent.collect { event ->
                event?.let {
                    handleTrainingEnding(it)
                }
            }
        }
    }

    private fun handleTrainingEnding(event: ChatViewModel.TrainingEndingEvent) {
        Log.d(TAG, "========== handleTrainingEnding: ${event.type} ==========")

        when (event.type) {
            "revive" -> showReviveDialog()
            "final" -> showFinalEndingAndExit()
        }
    }

    private fun showReviveDialog() {
        Log.d(TAG, "========== showReviveDialog ÂºÄÂßã ==========")

        val conversation = viewModel.conversation.value
        if (conversation == null) {
            Log.e(TAG, "conversation ‰∏∫ nullÔºÅ")
            return
        }

        val reviveCount = conversation.reviveCount
        Log.d(TAG, "ÂΩìÂâçÁª≠ÂëΩÊ¨°Êï∞: $reviveCount")

        try {
            AlertDialog.Builder(this)
                .setTitle("üíî Êó∂ÂÖâÊµÅÈÄù")
                .setMessage("‰Ω†‰ª¨Â∑≤ÁªèËµ∞Ëøá‰∫Ü ${conversation.actualRounds} ËΩÆÂØπËØù...\n\nÊòØÂê¶ÁªßÁª≠ËøôÊÆµÊÑüÊÉÖÔºü")
                .setPositiveButton("ÊòØÔºåÁªßÁª≠") { _, _ ->
                    Log.d(TAG, "ÁÇπÂáª‰∫Ü„ÄêÊòØÔºåÁªßÁª≠„ÄëÊåâÈíÆ")
                    showReviveStory(reviveCount + 1)
                }
                .setNegativeButton("Âê¶ÔºåÁªìÊùü") { _, _ ->
                    Log.d(TAG, "ÁÇπÂáª‰∫Ü„ÄêÂê¶ÔºåÁªìÊùü„ÄëÊåâÈíÆ")
                    showFinalEndingAndExit()
                }
                .setCancelable(false)
                .show()

            Log.d(TAG, "Áª≠ÂëΩÂØπËØùÊ°ÜÂ∑≤ÊòæÁ§∫")
        } catch (e: Exception) {
            Log.e(TAG, "ÊòæÁ§∫Áª≠ÂëΩÂØπËØùÊ°ÜÂ§±Ë¥•", e)
            e.printStackTrace()
        }
    }

    private fun showReviveStory(newReviveCount: Int) {
        Log.d(TAG, "========== showReviveStory ÂºÄÂßãÔºåÁª≠ÂëΩÊ¨°Êï∞: $newReviveCount ==========")

        val conversation = viewModel.conversation.value
        if (conversation == null) {
            Log.e(TAG, "conversation ‰∏∫ nullÔºÅ")
            return
        }

        Log.d(TAG, "conversation.id: ${conversation.id}")
        Log.d(TAG, "conversation.trainingEndingType: ${conversation.trainingEndingType}")

        val story = when (newReviveCount) {
            1 -> "Á¨¨1Ê¨°Áª≠ÂëΩ\n\nÂõ†‰∏∫‰Ω†ÁöÑÁà±ÔºåÂ•áËøπÂèëÁîü‰∫Ü...\n\n‰Ω†‰ª¨ËøòËÉΩÁªßÁª≠Âú®‰∏ÄËµ∑„ÄÇ"
            2 -> "Á¨¨2Ê¨°Áª≠ÂëΩ\n\nÁà±ÁöÑÂäõÈáèÂÜçÊ¨°Âª∂Áª≠‰∫ÜÊó∂ÂÖâ...\n\nËØ∑ÁèçÊÉúÂâ©‰∏ãÁöÑÊó∂Èó¥„ÄÇ"
            3 -> "Á¨¨3Ê¨°Áª≠ÂëΩÔºàÊúÄÂêé‰∏ÄÊ¨°Ôºâ\n\nËøôÊòØÊúÄÂêé‰∏ÄÊ¨°Êú∫‰ºö‰∫Ü...\n\nÂ•ΩÂ•ΩÁèçÊÉúÂΩºÊ≠§„ÄÇ"
            else -> "Áª≠ÂëΩÊïÖ‰∫ãÔºàÁ¨¨${newReviveCount}Ê¨°Ôºâ"
        }

        Log.d(TAG, "Áª≠ÂëΩÊïÖ‰∫ãÂÜÖÂÆπ: $story")

        try {
            val dialog = AlertDialog.Builder(this)
                .setTitle("‚ú® Áà±ÁöÑÂ•áËøπ")
                .setMessage(story)
                .setPositiveButton("ÁªßÁª≠ÂØπËØù üí¨") { _, _ ->
                    Log.d(TAG, "ÁÇπÂáª‰∫Ü„ÄêÁªßÁª≠ÂØπËØù„ÄëÊåâÈíÆ")
                    try {
                        viewModel.updateReviveCount(newReviveCount)
                        Log.d(TAG, "Ë∞ÉÁî® updateReviveCount ÊàêÂäü")
                    } catch (e: Exception) {
                        Log.e(TAG, "Ë∞ÉÁî® updateReviveCount Â§±Ë¥•", e)
                        e.printStackTrace()
                    }
                }
                .setCancelable(false)
                .create()

            dialog.show()
            Log.d(TAG, "Áª≠ÂëΩÊïÖ‰∫ãÂØπËØùÊ°ÜÂ∑≤ÊòæÁ§∫")

        } catch (e: Exception) {
            Log.e(TAG, "ÊòæÁ§∫Áª≠ÂëΩÊïÖ‰∫ãÂØπËØùÊ°ÜÂ§±Ë¥•", e)
            e.printStackTrace()
        }
    }

    private fun showFinalEndingAndExit() {
        Log.d(TAG, "========== showFinalEndingAndExit ÂºÄÂßã ==========")

        viewModel.resetTrainingEvent()

        val conversation = viewModel.conversation.value
        if (conversation == null) {
            Log.e(TAG, "conversation ‰∏∫ nullÔºÅ")
            exitToCharacterSelection()
            return
        }

        val story = "ÊïÖ‰∫ãÁöÑÁªàÁ´†\n\nËôΩÁÑ∂Ë¶ÅÁ¶ªÂºÄ‰∫ÜÔºå‰ΩÜ‰Ω†‰ª¨ÁöÑÂõûÂøÜ‰ºöÊ∞∏ËøúÁïôÂú®ÂøÉ‰∏≠...\n\nË∞¢Ë∞¢‰Ω†Èô™ÊàëËµ∞ËøáËøôÊÆµÊóÖÁ®ã„ÄÇ"

        Log.d(TAG, "ÁªìÊùüÊïÖ‰∫ãÂÜÖÂÆπ: $story")

        try {
            AlertDialog.Builder(this)
                .setTitle("üí´ ÊïÖ‰∫ãÁöÑÁªàÁ´†")
                .setMessage(story)
                .setPositiveButton("Á¶ªÂºÄ") { _, _ ->
                    Log.d(TAG, "ÁÇπÂáª‰∫Ü„ÄêÁ¶ªÂºÄ„ÄëÊåâÈíÆ")
                    exitToCharacterSelection()
                }
                .setCancelable(false)
                .show()

            Log.d(TAG, "ÁªìÊùüÊïÖ‰∫ãÂØπËØùÊ°ÜÂ∑≤ÊòæÁ§∫")

        } catch (e: Exception) {
            Log.e(TAG, "ÊòæÁ§∫ÁªìÊùüÊïÖ‰∫ãÂØπËØùÊ°ÜÂ§±Ë¥•", e)
            e.printStackTrace()
            exitToCharacterSelection()
        }
    }

    private fun exitToCharacterSelection() {
        Log.d(TAG, "========== exitToCharacterSelection ==========")

        try {
            val intent = Intent(this, CharacterSelectionActivity::class.java)
            intent.putExtra("gender", gender)
            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
            startActivity(intent)
            finish()
        } catch (e: Exception) {
            Log.e(TAG, "ÈÄÄÂá∫Âà∞ËßíËâ≤ÈÄâÊã©È°µÂ§±Ë¥•", e)
            e.printStackTrace()
            finish()
        }
    }

    private fun scrollToLatestBar(barCount: Int) {
        if (barCount == 0) return

        favorScrollView.post {
            val density = resources.displayMetrics.density
            val barWidth = 20f * density
            val barGap = 4f * density
            val lastBarIndex = barCount - 1
            val lastBarX = ((barWidth + barGap) * lastBarIndex).toInt()
            val scrollViewWidth = favorScrollView.width
            val singleBarWidth = barWidth.toInt()

            val scrollToX = if (lastBarX + singleBarWidth > scrollViewWidth) {
                (lastBarX + singleBarWidth - scrollViewWidth).coerceAtLeast(0)
            } else {
                0
            }

            favorScrollView.smoothScrollTo(scrollToX, 0)
        }
    }

    private fun setupInput() {
        sendButton.setOnClickListener {
            sendMessage()
        }

        inputEditText.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEND) {
                sendMessage()
                true
            } else {
                false
            }
        }
    }

    private fun setupKeyboardHandling() {
        recyclerView.addOnLayoutChangeListener { _, _, _, _, bottom, _, _, _, oldBottom ->
            if (bottom < oldBottom) {
                recyclerView.postDelayed({
                    val itemCount = messageAdapter.itemCount
                    if (itemCount > 0) {
                        recyclerView.scrollToPosition(itemCount - 1)
                    }
                }, 100)
            }
        }
    }

    private fun sendMessage() {
        val content = inputEditText.text.toString().trim()
        if (content.isEmpty() || content.length > 50) {
            return
        }

        val conversation = viewModel.conversation.value
        if (conversation != null) {
            Log.d(TAG, "ÂèëÈÄÅÂâçÊ£ÄÊü•ÔºöÂΩìÂâçËΩÆÊï∞=${conversation.actualRounds}")

            if (!conversation.isTrainingMode && conversation.actualRounds >= 45) {
                Log.d(TAG, "Â∑≤Ëææ45ËΩÆ‰∏äÈôêÔºåËøõÂÖ•Â§çÁõòÈ°µÈù¢")

                AlertDialog.Builder(this)
                    .setTitle("ÂØπËØùÁªìÊùü")
                    .setMessage("Êú¨Ê¨°ÂØπËØùÂ∑≤ËææÂà∞45ËΩÆ‰∏äÈôê\n\nÊúÄÁªàÂ•ΩÊÑüÂ∫¶: ${conversation.currentFavorability}%")
                    .setPositiveButton("ËøõÂÖ•Â§çÁõò") { dialog, _ ->
                        dialog.dismiss()
                        startReviewActivity()
                    }
                    .setCancelable(false)
                    .show()

                inputEditText.isEnabled = false
                sendButton.isEnabled = false

                return
            }
        }

        Log.d(TAG, "ÂèëÈÄÅÊ∂àÊÅØÔºö$content")
        viewModel.sendMessage(content)
        inputEditText.text.clear()
        inputEditText.requestFocus()
    }

    private fun hideKeyboard() {
        inputEditText.clearFocus()
        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(inputEditText.windowToken, 0)
    }
}